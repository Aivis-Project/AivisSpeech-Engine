[tool.taskipy.tasks]
serve = "python run.py"
format = "pysen run format"
lint = "pysen run lint"
typos = "typos"
test = "pytest"
update-snapshots = "pytest --snapshot-update"
update-licenses = "bash build_util/create_venv_and_generate_licenses.bash"
build = "poetry run task update-licenses && pyinstaller --noconfirm run.spec"

[tool.pysen]
version = "0.10.5"

[tool.pysen.lint]
enable_black = true
enable_flake8 = true
enable_isort = true
# enable_mypy = true
enable_mypy = false  # pysen から使うと意図的に unreachable にしているコードがエラーになるため (pysen は設定をカスタムできない)
mypy_preset = "strict"
mypy_plugins = [
  { function = "numpy.typing.mypy_plugin" },
  { function = "pydantic.mypy" },
]
line_length = 88
py_version = "py311"
isort_known_first_party = ["voicevox_engine"]
isort_known_third_party = ["numpy"]
[[tool.pysen.lint.mypy_targets]]
paths = ["."]

[tool.black] # automatically generated by pysen
# pysen ignores and overwrites any modifications
line-length = 88
target-version = ["py311"]

[tool.isort] # automatically generated by pysen
# pysen ignores and overwrites any modifications
default_section = "THIRDPARTY"
ensure_newline_before_comments = true
force_grid_wrap = 0
force_single_line = false
include_trailing_comma = true
known_first_party = ["voicevox_engine"]
known_third_party = ["numpy"]
line_length = 88
multi_line_output = 3
use_parentheses = true

[tool.pytest.ini_options]
filterwarnings = ["ignore::pydantic.warnings.PydanticDeprecatedSince20"]

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "~3.11"
numpy = "^1.20.0"
fastapi = "^0.110.0"
python-multipart = "^0.0.7" # NOTE: required by fastapi
uvicorn = "^0.15.0"
soundfile = "^0.12.1"
pyyaml = "^6.0"
pyworld-prebuilt = "^0.3.4.1"
jinja2 = "^3.1.3" # NOTE: required by fastapi
pyopenjtalk-dict = "^0.3.4.dev2"
semver = "^3.0.0"
platformdirs = "^4.2.0"
soxr = "^0.3.6"
pydantic = "^2.6.4"
starlette = "^0.36.3"
jaconv = "^0.3.4"
# AivisSpeech-Engine にはカスタマイズされた Style-Bert-VITS2 が必要
style-bert-vits2 = { git = "https://github.com/tsukumijima/Style-Bert-VITS2", rev = "aa0f9308b111a0c386f78f93565570d9072961c7" }
torch = [
    # ref: https://tech.layerx.co.jp/entry/2023/07/28/184937
    # Windows: CUDA 12.1
    { url = "https://download.pytorch.org/whl/cu121/torch-2.2.2%2Bcu121-cp311-cp311-win_amd64.whl", markers = "sys_platform == 'win32'" },
    # macOS (Intel): CPU only
    { url = "https://download.pytorch.org/whl/cpu/torch-2.2.2-cp311-none-macosx_10_9_x86_64.whl", markers = "sys_platform == 'darwin' and platform_machine == 'x86_64'" },
    # macOS (Apple Silicon): CPU only
    { url = "https://download.pytorch.org/whl/cpu/torch-2.2.2-cp311-none-macosx_11_0_arm64.whl", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'" },
    # Linux: CUDA 12.1
    { url = "https://download.pytorch.org/whl/cu121/torch-2.2.2%2Bcu121-cp311-cp311-linux_x86_64.whl", markers = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
    # Linux (ARM): CPU only
    { url = "https://download.pytorch.org/whl/cpu/torch-2.2.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", markers = "sys_platform == 'linux' and platform_machine == 'aarch64'" },
]
torchaudio = [
  # Windows: CUDA 12.1
  { url = "https://download.pytorch.org/whl/cu121/torchaudio-2.2.2%2Bcu121-cp311-cp311-win_amd64.whl", markers = "sys_platform == 'win32'" },
  # macOS (Intel): CPU only
  { url = "https://download.pytorch.org/whl/cpu/torchaudio-2.2.2-cp311-cp311-macosx_10_13_x86_64.whl", markers = "sys_platform == 'darwin' and platform_machine == 'x86_64'" },
  # macOS (Apple Silicon): CPU only
  { url = "https://download.pytorch.org/whl/cpu/torchaudio-2.2.2-cp311-cp311-macosx_11_0_arm64.whl", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'" },
  # Linux: CUDA 12.1
  { url = "https://download.pytorch.org/whl/cu121/torchaudio-2.2.2%2Bcu121-cp311-cp311-linux_x86_64.whl", markers = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
  # Linux (ARM): CPU only
  { url = "https://download.pytorch.org/whl/cpu/torchaudio-2.2.2-cp311-cp311-linux_aarch64.whl", markers = "sys_platform == 'linux' and platform_machine == 'aarch64'" },
]

[tool.poetry.group.dev.dependencies]
pyinstaller = "^5.13.2"
pre-commit = "^2.16.0"
poetry = "1.8.1"
poetry-plugin-export = "^1.6.0"
safety = "^3.1.0"
taskipy = "^1.12.2"

[tool.poetry.group.test.dependencies]
pysen = "~0.10.5"
black = "^24.2.0"
flake8-bugbear = "^24.2.6"
flake8 = "^7.0.0"
isort = "^5.13.0"
mypy = "^1.8.0"
pytest = "^8.0.0"
coveralls = "^3.2.0"
poetry = "1.8.1"
poetry-plugin-export = "^1.6.0"
httpx = "^0.25.0" # NOTE: required by fastapi.testclient.TestClient
syrupy = "^4.6.1"
types-pyyaml = "^6.0"

[tool.poetry.group.license.dependencies]
pip-licenses = "^4.3.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
